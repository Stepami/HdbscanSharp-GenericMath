Another request for NLP algorithm suggestions
Hey guys, This is my second request for suggestions for algorithms for a task that we are currently considering. My first request was here. Thanks so much for the first round of suggestions! It has been really fascinating and helpful. You guys are an invaluable resource. I think that I can detail the task a bit more accurately now, so I'm wondering if there are other algorithms that I should be looking at, and if the original suggestions are still relevant. We have a list of various items: x1, x2, ... xN For each item we have a list of corresponding documents. For example, for item 1 we might have M documents: d1_1, d1_2, ... , d1_M  This is where it gets a bit tricky. We can make a very rough estimate about how much each document actually describes what the corresponding item is. Some documents will be short paragraphs that specifically describe what the item is, others will only discuss some aspect or feature of the item. Some of the documents may only mention the item tangentially. But we do have a very rough estimate about how much each document focuses on the item, and we can toss out the documents that aren't particularly useful beforehand. Here's the task: Given one of the items, we want to find other items in the list that are similar, based on the corresponding documents. For example, let's say that we have three items (this is a made up example): x1: Honda Accord x2: Ford Mustang x3: McDonald's Big Mac  obviously we can see that x1 and x2 are similar and x3 is not related. For each item we have a series of documents. For example (once again made up) let's say: d1_1: a textual description of the Honda Accord d1_2: a technical description of the Honda Accord d1_3: a consumer review of the Honda Accord ... d2_1: a textual description of the Ford Mustang ... d3_2: a news article about the Big Mac  Let's say this specific task is to find items that are similar to item 1. We would like the algorithm to discover that item 2 is similar, based on these available documents. In our actual task, we have tens of thousands of items and many times more documents. I know this is a pretty complicated task but we'd like to look into seeing if this is possible and if so, which algorithms we should be looking at. Once again, thank you all so much!!!  submitted by /u/GiantGiantsFan [link] [comments] 