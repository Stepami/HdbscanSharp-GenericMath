Best way to enqueue asynchronous write requests?
I have the following classes  public class ServerNote { public String Name { get; set; } public String Note { get; set; } public String Date { get; set; } } public static class ServerNotesHandler { static List Notes { get; set; } = new List(); static ServerNotesHandler() { } public static void UpdateSingleNote(String servername, String note) { } public static void UpdateMultipleNotes(Dictionary dictNotes) { } public static String GetNote(String Servername) { } }     My use case will involve handling multiple near simultaneous requests from a web api, which will call ServerNotesHandler, which will update the notes, divvy them back out when requested, and eventually write the notes to a file. My biggest concern is, what happens if I have multiple threads call an update to ServerNotesHandler's list item? I don't care what order the requests are written, I only care that they are all honored, and none are dropped. How do I handle safely blocking or otherwise storing the incoming requests, so ServerNoteHandler can write all the requests synchronously without potentially damaging the data?  submitted by /u/boundbylife [link] [comments] 