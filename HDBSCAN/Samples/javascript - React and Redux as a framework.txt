React and Redux as a framework
I'm working on a project that uses React and Redux. I have a good amount of experience with several projects that use React and Redux, but I've found them all a bit lacking. It seems to me that React is very explicitly designed to be a UI rendering layer, and Redux a data management layer. What I'm not seeing in many, if not all, examples of React+Redux repos is anything handling business logic. So for example let's say we have a webapp that's displaying a list of movies. So for each movie you'd have a ListMovies container which shows a bunch of MovieDetails components. If I had a component names MovieFilter which let users choose movies by rating, I'd have a good amount of business logic happening between MovieFilter-->ListMovies-->MovieDetails I get that, and that makes sense, except if I have thousands of movies, and I want to lazy load the movies only when I know they'll render. Facebook has solved this using their Relay framework, which breaks apart the state tree into fragments which load when needed, but that functionality or system of control seems to be blatantly absent from most React + Redux apps. It seems to be an anti-pattern to break apart business logic and push in into the UI layer. Wouldn't it be more useful to have a controller layer which retrieves data from the state, does the business logic, makes decisions about which views get displayed, and then passed along that data to dumb components? It seems that D.R.Y alone would indicate there's a code smell when you have to repeatedly import connect and mapStateToProps dozens of times.  submitted by /u/kingofkyrgyzstan [link] [comments] 