Random Cropping as Data Augmentation?
I'm trying to implement random cropping on images as a form of data augmentation. I'm using these images as training data for a CNN. Here are my questions: Since the CNN has a fixed input size, after cropping, I need to bring my image back up to the original size. Is it better to pad the region outside of my crop with whitespace, or the reflection of the stuff inside the crop, or should I stretch the image back up to original size? If the latter, is there a conventional algorithm for stretching back up when the crop's dimensions aren't integer divisors of the original size? (do I fill in pixels with whatever was closest in the smaller image, or a weighted average of nearby pixels, etc)  How do I determine a safe maximum amount of cropping? Should I treat this as a hyperparameter to test and optimize?  Should I randomly crop my original training set differently between every epoch, or once before all of my training? And is this the same for other forms of random data augmentation? (e.g. random hue shift, which I already have implemented)  Is it best to use these random crops alongside the original images? Or if I crop one, should I remove the original from the training set? (I recognize the importance of using methods that maintain the balance between my classes whichever I do)    submitted by /u/On-A-Reveillark [link] [comments] 