/u/taejim on SQL Server 2014 to Azure blob storage - Picking up new databases
Personally, I'd be a little worried that an unmanageable number of people can migrate databases to the server and not either take a full backup, or notify you of the databases that are going on there. This implies that they have sysadmin rights on the server and can really mess around with the rest of the databases and stability of the server. But hey, you might have thousands of databases, and full automation is the only way that will work - although I'd try to automate the process of migrating a database to ensure that a full backup is taken automatically as part of the migration process. I guess what I'm saying is to be wary of trying to solve a Process problem with Technology :) If the process is followed, you can guarantee that you can restore their database (whether the process is "Hey, Jerome, please backup this new database", or them running a proc that will take a backup after migration), otherwise they'll need to supply you with the original backup so you can restore that plus the diff from the new server. If they can't do that, they have no database. From the point of view of the database, once it's had a full backup taken (on any server) the database is in a state where it can have a differential backup. The database doesn't care where it is - it just knows that it had a full backup taken at a particular point in time, and keeps track of the extents that have changed since then. If you want to reset this state, you take a full backup :) The best option in this case would be to look at the backup history stored on the server itself. See https://www.mssqltips.com/sqlservertip/1601/script-to-retrieve-sql-server-database-backup-history-and-no-backups/ for a bunch of scripts, particularly the "no backups in the last 24 hours". The msdb database records only those backups that were taken on this server, and it's relatively easy to craft a script that will grab the names of each database that hasn't yet been backed up (or was backed up more than X days ago - on the off chance that someone has restored a database that has the same name as another database had a while back). Once you've got the names, you can use that as a cursor and loop through each row, issuing a full backup command (using the database name instead of "USER_DATABASES"). Run this prior to your nightly diff backups, and you should be right (although you'll get a full and then a mostly-empty diff backup straight after). If you're part of an Always On Availability Group, I'm not sure if the backup history will float between servers - just one more thing to consider. Another option could be to use a DDL trigger on CREATE DATABASE events - and probably RESTORE DATABASE events - to log the database creation. This link demonstrates how to send an email on a CREATE DATABASE event, but note you do NOT want to backup the database in this trigger - you want to log it somewhere, and then take a backup in a different process by reading the log. https://www.mssqltips.com/sqlservertip/2864/email-alerts-when-new-databases-are-created-in-sql-server/ There's also sys.databases, which shows the creation date for each database, and a restore will affect the creation date. As usual, I have a caveat - if you restore over the top of an existing database, it probably won't update the create_date.  SELECT name, create_date FROM sys.databases order by create_date desc  An alternate option is to do full backups of every database every night. It'll take up more space, but you won't need any special logic at all. Hopefully that gives you a bit more of a strategy - I'd write more now, but it's 1am :) Edit: You could also log all CREATE DATABASE and RESTORE DATABASE events to get a definitive list of the actions that have taken place on the server for the past 24 hours, and handle each action separately. You'll be writing a little bit of code though.   