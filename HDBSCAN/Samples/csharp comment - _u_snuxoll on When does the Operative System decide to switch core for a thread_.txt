/u/snuxoll on When does the Operative System decide to switch core for a thread?
Yes. The OS Kernel will typically set an interrupt timer on your CPU's PIC (Programmable Interrupt Controller), either at a fixed frequency (say, 1000Hz) or a variable one in the case of tickless kernels (Windows 8 and newer, Linux since 3.10) based on system load. Every time an interrupt fires off to the CPU it immediately saves necessary state of the CPU and hands control over to the interrupt handler (some code in the kernel) - at this point the kernel can decide it's time to start executing a new thread, so it saves the running state of the program counter and other CPU registers into a data structure associated with the thread, restores that same state for another and allows it to begin executing. It doesn't matter if your program is executing an ADD, a SYSCALL, a FMA instruction, whatever - that interrupt fires and your code is stopped immediately.   