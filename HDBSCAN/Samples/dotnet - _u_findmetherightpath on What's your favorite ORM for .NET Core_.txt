/u/findmetherightpath on What's your favorite ORM for .NET Core?
I have been building an application for a large benefits company over the last 7 months and have been using EF Core from 1.1.0, 1.1.2, and in the last week 2.0.0. I've found that for most things, it works great (although I always use projections instead of directly pulling my full entities). I do have to say beware if you have many-to-many relationships. The requirement to have a join entity makes querying very difficult and often performance poor. There is an issue on GitHub to remove this requirement, but it is not on the current roadmap. I have gotten around this issue by writing stored procedures for the more complex or heavy joins, and dropping down to ADO.NET to retrieve the results. I have multiple projects in my solution that abstract away the details of how I'm returning my DTOs. Recently I worked on an ATM locator as well, for a credit union, and used Dapper in an ASP.NET Core MVC application (only using Web API). The data is directly loaded through bulk insert in SQL Server, so I didn't use Dapper for any CRUD operations. I did build out stored procedures to do geospatial proximity searches, and calling and working with the data from Dapper has been a breath of fresh air. I also haven't been spoiled by SQL generation, which has helped me get back into productively using SQL directly. I personally prefer to use Entity Framework (Core) where it fits, which may be personal bias since I have been working with it since v4.3.0, but when presented with more complex persistence I would definitely reach for Dapper. Having common SQL generation is a great time saver, but as soon as you start needing complex relationships or need the full availability of your database features, a micro-ORM takes away managing connections and mapping so you can get down to your optimal solution.   