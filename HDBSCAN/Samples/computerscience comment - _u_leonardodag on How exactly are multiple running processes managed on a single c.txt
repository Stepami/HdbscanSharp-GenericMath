/u/leonardodag on How exactly are multiple running processes managed on a single core, on an architectural level?
To complement the other responses, I think it's important to know how context switches happen. When the time slice of a process starts, the kernel's scheduler basically just restores the registers and jumps back into your code (very simplified, mind you). But how does the time slice end? Your code doesn't necessarily switch back to the kernel intentionally, but it will get stopped anyway. The secret is, before you context switch to the user mode process, the kernel also runs a certain instruction which tells the processor "cause an interrupt in x time". And that interrupt will call a function in the kernel, which will be responsible for saving the registers, and then it will schedule the next process. Keep in mind many things here are simplified, since the important point is the timed interrupt which will cause the end of a process' time slice.   