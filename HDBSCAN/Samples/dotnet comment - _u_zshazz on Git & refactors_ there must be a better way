/u/zshazz on Git & refactors: there must be a better way - introducing gmaster client
I'm actually trying it out (and will be using it over the next few days). I hope this is viewed as constructive criticism because I really like the idea of this and both GitKraken and SourceTree sometimes frustrate me with miscellaneous issues, so I'm actually receptive to just trying out something different. A couple of notes of things that I'm running into: I tried "Stash All" and it doesn't appear to do anything -- Stashing changes is something I do fairly often, so that might be a blocker for me using it as my primary. I may be missing something on how to use that in gmaster? Right now everything feels like it's far too "big"/wide. There's a lot of wasted "whitespace" around everything and it makes me feel like, for the first time in recent memory, that my widescreen monitor is just not wide enough. Fortunately I can collapse everything to get some width back, but it'd go a long way to figure out how to use at least width a little more effectively (then maybe I wouldn't feel like collapsing the Semantic Outline, for instance). I would really like an alternate view of branches/commits on the branch explorer view. All of these big dots mean absolutely nothing to me. I have to see what the commit message is by hovering over or selecting one, so this is a huge usability downgrade from GitKraken or SourceTree. I think GitKraken has the best commit view right now, so if you could just blatantly rip them off, that'd be greeeaat. A tree view would be extremely nice, and showing the changes per folder in that tree view when you select it would be super nice. I just got done with a big refactoring/upgrade job and GitKraken's tree view made the thousand-file changes actually bearable and understandable. At one point SourceTree threw it's tree view into the garbage, so that's one of the reasons in the past I've had to throw SourceTree into the garbage. It's a mandatory feature when you need it, so at this stage I know I would need at least another backup git client if that's not put in. Not saying that's a deal-breaker for me to use gmaster as a primary (since it's not every day that I need it), but it would make a sale to me much easier since it's not the cost of your tool plus the maintenence cost of another company's tool. I definitely would like hunk and/or per line staging of changes or an alternative feature for handling.  Some notes of my personal workflow that I've always thought could be improved: Sometimes I do too much work and I want to make a smaller commit to make it more smaller/atomic (especially to make sure a semi-tricky change gets visibility in the commit log for later review). The only downside is that I can't (trivially) check to see whether partial staging compiles and works as expected (if I want to maintain that each commit is buildable and passes all tests, for instance). It actually would be nice to do something akin to the exact opposite operation that typically git clients support: maybe I want to select lines to keep (and stash all the rest, but also be able to easily add a few lines from that stash as I decide I need them as I author my commit). For instance, I might stash all but line 25-30 of a file (let's say I added a method), but later unstash line 35 as well (maybe it's a field declaration I'm using in the method I wrote). That way I can actually compile and run the commit I'm about to make. I'm already essentially doing that in my current workflows, it's just something that I think might be common enough that it should be treated first-class and made easier and more straight-forward. None of my coworkers go through that much trouble on their commits, because it's actually kind of a pain. Throw in some semantic smartness and maybe I could select the method itself and gmaster knows enough to add the method in it's entirety... and maybe the tool eventually could suggest committing referenced fields that changed relevant to that method? Obviously, there's lines to be drawn there (I don't want/need it to be equivalent in smartness to a full IDE, since I'm planning on compiling that before I commit it and I'll discover those things at that point). Anyway, it's an interesting tool. I'll definitely keep playing around with it.   