My understanding so far [x-post]
This is my theory, or more like a general outline, of how programming (or software engineering) knowledge can be broken down into three categories: languages and frameworks: you can imagine it as a tree where each language can have multiple frameworks (i.e java -> struts, spring, hibernate, javascript -> jquery, angular)  concepts: these are language independent although some may be applicable to only 1 language or framework (i.e design patterns, software life cycles, readability, truthiness [afaik only applies to javascript])  tools: this is software that helps you write, debug and deploy code such as IDEs, web-servers, debuggers etc.   You can understand concepts and how to use tools, but if you don't know a concrete language or framework you won't be able to implement anything. Similarly, you can know a language but if you don't know the concepts or tools your software will probably be shit. So am I missing something important here, or is that pretty much all there is to it? [Someone mentioned project management as a category as well; which is true, but I'm focusing on the technical aspects so far].  submitted by /u/Steven_Hedberg [link] [comments] 