/u/_pupil_ on Agile Software Development and Scrum - Heaven or Hell?
I have done time estimates on earlier projects though. In my experience, the vagaries never average out because you simply can't ever put a single objective number on any one task that holds even approximately true across time, people and problem domain  See, you're contradicting yourself here and backing my point :) You can never put a number on something even approximately true? That's a realllly bad estimate. It's something that needs a lot of repeating, and measure, to align. This is, btw, a major component of project management and has a ton of academic backing. It needs to be done for people to be better. It needs to be done to get away from what you are talking about, because this has been measured, and it has been shown to work. Repeatedly. For decades. And while translating gut feelings quickly and with minimal overhead is something you might be able to get better at with time, nobody is at the start, and the whole process is going to waste a lot of time before everyone is an expert at it.  Right, competence is not free. But you've assumed a result that isn't borne out by the evidence, and you've assumed a state of ignorance in your team over time that isn't congruent with the proposed practice. Cost and scope are not incidental to project success. Functioning estimates give concrete, cash money, business value. New people coming into a functional team that understands how to estimate will learn more quickly, have their estimates brought into line more quickly, and provide aggregate benefits in realigning estimation practices. You've also assumed, contrary to how your team otherwise handles competencies, that everyone has to be an expert. No. Your team has to be basically competent, which is a whole other picture. As for knowing the how/why/where/who/when of improvements, at the end of a sprint, everyone usually knows exactly what the issues are.  Again, you're kinda arguing the other side here. How are you tracking these knowledges year on year, across aggregate teams, across projects, customers, and domains? How are you quantifying the effect of developing faster across projects? No measurement, no feedback loop, no refining, no quantitative analysis. No shared knowledge. No transmittable understanding of the "circumstantial elements". No baseline for organizational, process, or practice changes. No data to drive decision making. No data to confirm the veracity of those gut feelings... That is barely defensible for single teams and small projects. It's is insanity in the Enterprise. So back to the "for realsies" bit: we have studied gut feelings extensively. They don't work like you presume here. They aren't as accurate as you presume here. They aren't as commonly held as you presume. They are not accurately recalled, aggregated, or synthesized, and they absolutely do not translate between individuals over time. NewProjectLeader 2020 gets to guess at how your guesses have stacked up, ensuring lessons are learned again and again and again in a vacuum of ignorance. Data tells us that that is wildly worse than what data will provide, and every person/project I have engaged with who has engaged in quantitative estimate tracking has been shocked at the amazing difference between perceived and actual deviations.   